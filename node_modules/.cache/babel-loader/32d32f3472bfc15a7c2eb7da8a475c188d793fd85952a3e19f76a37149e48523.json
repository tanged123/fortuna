{"ast":null,"code":"import Papa from 'papaparse';\nexport const parseCSV = csvContent => {\n  const results = Papa.parse(csvContent, {\n    header: true,\n    skipEmptyLines: true\n  });\n  const data = results.data;\n\n  // Find monthly net income\n  const monthlyNetIncomeRow = data.find(row => {\n    var _row$boobaMoney, _row$boobaMoney2;\n    return ((_row$boobaMoney = row['booba money']) === null || _row$boobaMoney === void 0 ? void 0 : _row$boobaMoney.includes('Monthly Net Income')) || ((_row$boobaMoney2 = row['booba money']) === null || _row$boobaMoney2 === void 0 ? void 0 : _row$boobaMoney2.includes('$'));\n  });\n  let monthlyNetIncome = 0;\n  if (monthlyNetIncomeRow) {\n    var _monthlyNetIncomeRow$;\n    const incomeValue = ((_monthlyNetIncomeRow$ = monthlyNetIncomeRow['booba money']) === null || _monthlyNetIncomeRow$ === void 0 ? void 0 : _monthlyNetIncomeRow$.replace(/[$,]/g, '')) || '0';\n    monthlyNetIncome = parseFloat(incomeValue) || 0;\n  }\n\n  // Parse expenses\n  const expenses = [];\n  let totalExpenses = 0;\n  const expenseCategories = ['Rent', 'Utilities', 'Groceries', 'Resturants', 'Gas/Auto', 'Medical/Health', 'Gym', 'Travel', 'Shopping', 'Fun / Night out', 'Misc.'];\n  for (const row of data) {\n    var _row$boobaMoney3;\n    const category = (_row$boobaMoney3 = row['booba money']) === null || _row$boobaMoney3 === void 0 ? void 0 : _row$boobaMoney3.trim();\n    if (category && expenseCategories.includes(category)) {\n      var _row$boobooMoeny;\n      // The amount is in the second column (booboo moeny)\n      const amountStr = ((_row$boobooMoeny = row['booboo moeny']) === null || _row$boobooMoeny === void 0 ? void 0 : _row$boobooMoeny.replace(/[$,]/g, '')) || '0';\n      const amount = parseFloat(amountStr) || 0;\n      if (amount > 0) {\n        expenses.push({\n          category,\n          amount\n        });\n        totalExpenses += amount;\n      }\n    }\n  }\n\n  // Calculate savings\n  const savings = monthlyNetIncome - totalExpenses;\n  const savingsPercentage = monthlyNetIncome > 0 ? savings / monthlyNetIncome * 100 : 0;\n\n  // Find annual return percentage\n  const annualReturnRow = data.find(row => {\n    var _row$boobaMoney4;\n    return (_row$boobaMoney4 = row['booba money']) === null || _row$boobaMoney4 === void 0 ? void 0 : _row$boobaMoney4.includes('Annual Return');\n  });\n  let annualReturn = 7; // default\n  if (annualReturnRow) {\n    var _annualReturnRow$boob;\n    const returnValue = ((_annualReturnRow$boob = annualReturnRow['booba money']) === null || _annualReturnRow$boob === void 0 ? void 0 : _annualReturnRow$boob.replace(/[%,]/g, '')) || '7';\n    annualReturn = parseFloat(returnValue) || 7;\n  }\n  return {\n    monthlyNetIncome,\n    expenses,\n    totalExpenses,\n    savings,\n    savingsPercentage,\n    annualReturn\n  };\n};\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n  }).format(amount);\n};\nexport const calculateInvestmentProjection = (monthlyContribution, annualReturn, years) => {\n  const monthlyRate = annualReturn / 100 / 12;\n  const totalMonths = years * 12;\n  if (monthlyRate === 0) {\n    return monthlyContribution * totalMonths;\n  }\n  return monthlyContribution * ((Math.pow(1 + monthlyRate, totalMonths) - 1) / monthlyRate);\n};","map":{"version":3,"names":["Papa","parseCSV","csvContent","results","parse","header","skipEmptyLines","data","monthlyNetIncomeRow","find","row","_row$boobaMoney","_row$boobaMoney2","includes","monthlyNetIncome","_monthlyNetIncomeRow$","incomeValue","replace","parseFloat","expenses","totalExpenses","expenseCategories","_row$boobaMoney3","category","trim","_row$boobooMoeny","amountStr","amount","push","savings","savingsPercentage","annualReturnRow","_row$boobaMoney4","annualReturn","_annualReturnRow$boob","returnValue","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","format","calculateInvestmentProjection","monthlyContribution","years","monthlyRate","totalMonths","Math","pow"],"sources":["/home/tanged/repo/Fortuna/src/utils/csvParser.ts"],"sourcesContent":["import Papa from 'papaparse';\nimport { ParsedFinancialData, Expense, CSVRow } from '../types/finance';\n\nexport const parseCSV = (csvContent: string): ParsedFinancialData => {\n  const results = Papa.parse<CSVRow>(csvContent, {\n    header: true,\n    skipEmptyLines: true,\n  });\n\n  const data = results.data;\n  \n  // Find monthly net income\n  const monthlyNetIncomeRow = data.find(row => \n    row['booba money']?.includes('Monthly Net Income') || \n    row['booba money']?.includes('$')\n  );\n  \n  let monthlyNetIncome = 0;\n  if (monthlyNetIncomeRow) {\n    const incomeValue = monthlyNetIncomeRow['booba money']?.replace(/[$,]/g, '') || '0';\n    monthlyNetIncome = parseFloat(incomeValue) || 0;\n  }\n\n  // Parse expenses\n  const expenses: Expense[] = [];\n  let totalExpenses = 0;\n  \n  const expenseCategories = [\n    'Rent', 'Utilities', 'Groceries', 'Resturants', 'Gas/Auto', \n    'Medical/Health', 'Gym', 'Travel', 'Shopping', 'Fun / Night out', 'Misc.'\n  ];\n\n  for (const row of data) {\n    const category = row['booba money']?.trim();\n    if (category && expenseCategories.includes(category)) {\n      // The amount is in the second column (booboo moeny)\n      const amountStr = row['booboo moeny']?.replace(/[$,]/g, '') || '0';\n      const amount = parseFloat(amountStr) || 0;\n      \n      if (amount > 0) {\n        expenses.push({ category, amount });\n        totalExpenses += amount;\n      }\n    }\n  }\n\n  // Calculate savings\n  const savings = monthlyNetIncome - totalExpenses;\n  const savingsPercentage = monthlyNetIncome > 0 ? (savings / monthlyNetIncome) * 100 : 0;\n\n  // Find annual return percentage\n  const annualReturnRow = data.find(row => \n    row['booba money']?.includes('Annual Return')\n  );\n  let annualReturn = 7; // default\n  if (annualReturnRow) {\n    const returnValue = annualReturnRow['booba money']?.replace(/[%,]/g, '') || '7';\n    annualReturn = parseFloat(returnValue) || 7;\n  }\n\n  return {\n    monthlyNetIncome,\n    expenses,\n    totalExpenses,\n    savings,\n    savingsPercentage,\n    annualReturn\n  };\n};\n\nexport const formatCurrency = (amount: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n  }).format(amount);\n};\n\nexport const calculateInvestmentProjection = (\n  monthlyContribution: number,\n  annualReturn: number,\n  years: number\n): number => {\n  const monthlyRate = annualReturn / 100 / 12;\n  const totalMonths = years * 12;\n  \n  if (monthlyRate === 0) {\n    return monthlyContribution * totalMonths;\n  }\n  \n  return monthlyContribution * ((Math.pow(1 + monthlyRate, totalMonths) - 1) / monthlyRate);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}