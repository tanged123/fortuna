{"ast":null,"code":"import{CSVStandardizer}from'./csvStandardizer';export const parseCSV=csvContent=>{const errors=[];const warnings=[];try{// Validate and clean the CSV content\nconst validation=CSVStandardizer.validateAndCleanCSV(csvContent);if(!validation.isValid){errors.push(...validation.errors);return{data:getDefaultFinancialData(),errors,warnings};}// Standardize the CSV data\nconst standardizedData=CSVStandardizer.standardizeCSV(validation.cleanedContent);if(standardizedData.rows.length===0){errors.push('No data rows found in CSV');return{data:getDefaultFinancialData(),errors,warnings};}// Extract financial data using the standardizer\nconst financialData=CSVStandardizer.extractFinancialData(standardizedData);// Add warnings for missing data\nif(financialData.monthlyNetIncome===0){warnings.push('No monthly income found in CSV');}if(financialData.expenses.length===0){warnings.push('No expenses found in CSV');}if(financialData.annualReturn===7){warnings.push('Using default annual return of 7% (no return rate found in CSV)');}return{data:financialData,errors,warnings};}catch(error){errors.push(\"Failed to parse CSV: \".concat(error instanceof Error?error.message:'Unknown error'));return{data:getDefaultFinancialData(),errors,warnings};}};/**\n * Returns default financial data when parsing fails\n */const getDefaultFinancialData=()=>({monthlyNetIncome:0,expenses:[],totalExpenses:0,savings:0,savingsPercentage:0,annualReturn:7});/**\n * Legacy function for backward compatibility\n * @deprecated Use parseCSV instead for better error handling\n */export const parseCSVLegacy=csvContent=>{const result=parseCSV(csvContent);return result.data;};export const formatCurrency=amount=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:2}).format(amount);};export const calculateInvestmentProjection=(monthlyContribution,annualReturn,years)=>{const monthlyRate=annualReturn/100/12;const totalMonths=years*12;if(monthlyRate===0){return monthlyContribution*totalMonths;}return monthlyContribution*((Math.pow(1+monthlyRate,totalMonths)-1)/monthlyRate);};","map":{"version":3,"names":["CSVStandardizer","parseCSV","csvContent","errors","warnings","validation","validateAndCleanCSV","isValid","push","data","getDefaultFinancialData","standardizedData","standardizeCSV","cleanedContent","rows","length","financialData","extractFinancialData","monthlyNetIncome","expenses","annualReturn","error","concat","Error","message","totalExpenses","savings","savingsPercentage","parseCSVLegacy","result","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","calculateInvestmentProjection","monthlyContribution","years","monthlyRate","totalMonths","Math","pow"],"sources":["/home/tanged/repo/Fortuna/src/utils/csvParser.ts"],"sourcesContent":["import { ParsedFinancialData } from '../types/finance';\nimport { CSVStandardizer } from './csvStandardizer';\n\nexport interface ParseResult {\n  data: ParsedFinancialData;\n  errors: string[];\n  warnings: string[];\n}\n\nexport const parseCSV = (csvContent: string): ParseResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    // Validate and clean the CSV content\n    const validation = CSVStandardizer.validateAndCleanCSV(csvContent);\n    if (!validation.isValid) {\n      errors.push(...validation.errors);\n      return {\n        data: getDefaultFinancialData(),\n        errors,\n        warnings\n      };\n    }\n\n    // Standardize the CSV data\n    const standardizedData = CSVStandardizer.standardizeCSV(validation.cleanedContent);\n    \n    if (standardizedData.rows.length === 0) {\n      errors.push('No data rows found in CSV');\n      return {\n        data: getDefaultFinancialData(),\n        errors,\n        warnings\n      };\n    }\n\n    // Extract financial data using the standardizer\n    const financialData = CSVStandardizer.extractFinancialData(standardizedData);\n\n    // Add warnings for missing data\n    if (financialData.monthlyNetIncome === 0) {\n      warnings.push('No monthly income found in CSV');\n    }\n    if (financialData.expenses.length === 0) {\n      warnings.push('No expenses found in CSV');\n    }\n    if (financialData.annualReturn === 7) {\n      warnings.push('Using default annual return of 7% (no return rate found in CSV)');\n    }\n\n    return {\n      data: financialData,\n      errors,\n      warnings\n    };\n\n  } catch (error) {\n    errors.push(`Failed to parse CSV: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return {\n      data: getDefaultFinancialData(),\n      errors,\n      warnings\n    };\n  }\n};\n\n/**\n * Returns default financial data when parsing fails\n */\nconst getDefaultFinancialData = (): ParsedFinancialData => ({\n  monthlyNetIncome: 0,\n  expenses: [],\n  totalExpenses: 0,\n  savings: 0,\n  savingsPercentage: 0,\n  annualReturn: 7\n});\n\n/**\n * Legacy function for backward compatibility\n * @deprecated Use parseCSV instead for better error handling\n */\nexport const parseCSVLegacy = (csvContent: string): ParsedFinancialData => {\n  const result = parseCSV(csvContent);\n  return result.data;\n};\n\nexport const formatCurrency = (amount: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n  }).format(amount);\n};\n\nexport const calculateInvestmentProjection = (\n  monthlyContribution: number,\n  annualReturn: number,\n  years: number\n): number => {\n  const monthlyRate = annualReturn / 100 / 12;\n  const totalMonths = years * 12;\n  \n  if (monthlyRate === 0) {\n    return monthlyContribution * totalMonths;\n  }\n  \n  return monthlyContribution * ((Math.pow(1 + monthlyRate, totalMonths) - 1) / monthlyRate);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}