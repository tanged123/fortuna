{"ast":null,"code":"import { CSVStandardizer } from './csvStandardizer';\nexport const parseCSV = csvContent => {\n  const errors = [];\n  const warnings = [];\n  try {\n    // Validate and clean the CSV content\n    const validation = CSVStandardizer.validateAndCleanCSV(csvContent);\n    if (!validation.isValid) {\n      errors.push(...validation.errors);\n      return {\n        data: getDefaultFinancialData(),\n        errors,\n        warnings\n      };\n    }\n\n    // Standardize the CSV data\n    const standardizedData = CSVStandardizer.standardizeCSV(validation.cleanedContent);\n    if (standardizedData.rows.length === 0) {\n      errors.push('No data rows found in CSV');\n      return {\n        data: getDefaultFinancialData(),\n        errors,\n        warnings\n      };\n    }\n\n    // Extract financial data using the standardizer\n    const financialData = CSVStandardizer.extractFinancialData(standardizedData);\n\n    // Add warnings for missing data\n    if (financialData.monthlyNetIncome === 0) {\n      warnings.push('No monthly income found in CSV');\n    }\n    if (financialData.expenses.length === 0) {\n      warnings.push('No expenses found in CSV');\n    }\n    if (financialData.annualReturn === 7) {\n      warnings.push('Using default annual return of 7% (no return rate found in CSV)');\n    }\n    return {\n      data: financialData,\n      errors,\n      warnings\n    };\n  } catch (error) {\n    errors.push(`Failed to parse CSV: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return {\n      data: getDefaultFinancialData(),\n      errors,\n      warnings\n    };\n  }\n};\n\n/**\n * Returns default financial data when parsing fails\n */\nconst getDefaultFinancialData = () => ({\n  monthlyNetIncome: 0,\n  expenses: [],\n  totalExpenses: 0,\n  savings: 0,\n  savingsPercentage: 0,\n  annualReturn: 7\n});\n\n/**\n * Legacy function for backward compatibility\n * @deprecated Use parseCSV instead for better error handling\n */\nexport const parseCSVLegacy = csvContent => {\n  const result = parseCSV(csvContent);\n  return result.data;\n};\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n  }).format(amount);\n};\nexport const calculateInvestmentProjection = (monthlyContribution, annualReturn, years) => {\n  const monthlyRate = annualReturn / 100 / 12;\n  const totalMonths = years * 12;\n  if (monthlyRate === 0) {\n    return monthlyContribution * totalMonths;\n  }\n  return monthlyContribution * ((Math.pow(1 + monthlyRate, totalMonths) - 1) / monthlyRate);\n};","map":{"version":3,"names":["CSVStandardizer","parseCSV","csvContent","errors","warnings","validation","validateAndCleanCSV","isValid","push","data","getDefaultFinancialData","standardizedData","standardizeCSV","cleanedContent","rows","length","financialData","extractFinancialData","monthlyNetIncome","expenses","annualReturn","error","Error","message","totalExpenses","savings","savingsPercentage","parseCSVLegacy","result","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","calculateInvestmentProjection","monthlyContribution","years","monthlyRate","totalMonths","Math","pow"],"sources":["/home/tanged/repo/Fortuna/src/utils/csvParser.ts"],"sourcesContent":["import { ParsedFinancialData, Expense, CSVRow } from '../types/finance';\nimport { CSVStandardizer } from './csvStandardizer';\n\nexport interface ParseResult {\n  data: ParsedFinancialData;\n  errors: string[];\n  warnings: string[];\n}\n\nexport const parseCSV = (csvContent: string): ParseResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    // Validate and clean the CSV content\n    const validation = CSVStandardizer.validateAndCleanCSV(csvContent);\n    if (!validation.isValid) {\n      errors.push(...validation.errors);\n      return {\n        data: getDefaultFinancialData(),\n        errors,\n        warnings\n      };\n    }\n\n    // Standardize the CSV data\n    const standardizedData = CSVStandardizer.standardizeCSV(validation.cleanedContent);\n    \n    if (standardizedData.rows.length === 0) {\n      errors.push('No data rows found in CSV');\n      return {\n        data: getDefaultFinancialData(),\n        errors,\n        warnings\n      };\n    }\n\n    // Extract financial data using the standardizer\n    const financialData = CSVStandardizer.extractFinancialData(standardizedData);\n\n    // Add warnings for missing data\n    if (financialData.monthlyNetIncome === 0) {\n      warnings.push('No monthly income found in CSV');\n    }\n    if (financialData.expenses.length === 0) {\n      warnings.push('No expenses found in CSV');\n    }\n    if (financialData.annualReturn === 7) {\n      warnings.push('Using default annual return of 7% (no return rate found in CSV)');\n    }\n\n    return {\n      data: financialData,\n      errors,\n      warnings\n    };\n\n  } catch (error) {\n    errors.push(`Failed to parse CSV: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return {\n      data: getDefaultFinancialData(),\n      errors,\n      warnings\n    };\n  }\n};\n\n/**\n * Returns default financial data when parsing fails\n */\nconst getDefaultFinancialData = (): ParsedFinancialData => ({\n  monthlyNetIncome: 0,\n  expenses: [],\n  totalExpenses: 0,\n  savings: 0,\n  savingsPercentage: 0,\n  annualReturn: 7\n});\n\n/**\n * Legacy function for backward compatibility\n * @deprecated Use parseCSV instead for better error handling\n */\nexport const parseCSVLegacy = (csvContent: string): ParsedFinancialData => {\n  const result = parseCSV(csvContent);\n  return result.data;\n};\n\nexport const formatCurrency = (amount: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n  }).format(amount);\n};\n\nexport const calculateInvestmentProjection = (\n  monthlyContribution: number,\n  annualReturn: number,\n  years: number\n): number => {\n  const monthlyRate = annualReturn / 100 / 12;\n  const totalMonths = years * 12;\n  \n  if (monthlyRate === 0) {\n    return monthlyContribution * totalMonths;\n  }\n  \n  return monthlyContribution * ((Math.pow(1 + monthlyRate, totalMonths) - 1) / monthlyRate);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}